import { useState, useEffect } from "react";
import { ClipboardList, Languages, Info } from "lucide-react";

export default function App() {
  const [districts, setDistricts] = useState([]);
  const [years, setYears] = useState([]);
  const [selectedState] = useState("BIHAR");
  const [selectedDistrict, setSelectedDistrict] = useState("");
  const [selectedYear, setSelectedYear] = useState("");
  const [data, setData] = useState([]);
  const [showHindi, setShowHindi] = useState(false);
  const [loading, setLoading] = useState(false);
  const [locationLoading, setLocationLoading] = useState(false);
  const API_BASE =
    process.env.REACT_APP_API_BASE ||
    (process.env.NODE_ENV === "development" ? "http://localhost:5000" : "");

  useEffect(() => {
    if (!selectedState) return;
    fetch(`${API_BASE}/api/mgnrega?state=${selectedState}`)
      .then(res => res.json())
      .then(json => {
        const records = json.records || [];
        setDistricts(
          [...new Set(records.map(r => r.district_name).filter(Boolean))].sort()
        );
        setYears(
          [...new Set(records.map(r => r.fin_year).filter(Boolean))].sort().reverse()
        );
      })
      .catch(err => console.error("Error loading metadata:", err));
  }, [selectedState]);

  const fetchData = async () => {
    setLoading(true);

    const query = new URLSearchParams({
      state: selectedState,
      ...(selectedDistrict && { district: selectedDistrict }),
      ...(selectedYear && { year: selectedYear }),
    }).toString();

    try {
      const res = await fetch(`${API_BASE}/api/mgnrega?${query}`);
      const json = await res.json();
      setData(json.records || []);
    } catch (err) {
      console.error("Error fetching data:", err);
      alert("Error loading data. Try again.");
    }
    setLoading(false);
  };

  const numericKeys = [
    "approved_labour_budget",
    "average_wage_rate_per_day_per_person",
    "average_days_of_employment_provided_per_household",
    "differently_abled_persons_worked",
    "number_of_completed_works",
    "number_of_ongoing_works",
    "total_no_of_workers",
  ];

  const hindiLabels = {
    approved_labour_budget: "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§∂‡•ç‡§∞‡§Æ ‡§¨‡§ú‡§ü",
    average_wage_rate_per_day_per_person: "‡§î‡§∏‡§§ ‡§¶‡•à‡§®‡§ø‡§ï ‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä ‡§¶‡§∞",
    average_days_of_employment_provided_per_household: "‡§™‡•ç‡§∞‡§§‡§ø ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§î‡§∏‡§§ ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞ ‡§¶‡§ø‡§µ‡§∏",
    differently_abled_persons_worked: "‡§µ‡§ø‡§ï‡§≤‡§æ‡§Ç‡§ó ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§®‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§ø‡§Ø‡§æ",
    number_of_completed_works: "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
    number_of_ongoing_works: "‡§ö‡§≤ ‡§∞‡§π‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
    total_no_of_workers: "‡§ï‡•Å‡§≤ ‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
  };

  const averages = {};
  numericKeys.forEach(key => {
    const nums = data.map(d => parseFloat(d[key])).filter(n => !isNaN(n));
    averages[key] = nums.length ? nums.reduce((a, b) => a + b, 0) / nums.length : 0;
  });

  const getDotColor = (key, value) => {
    const num = parseFloat(value);
    if (isNaN(num)) return "bg-gray-300";
    const avg = averages[key];
    if (num > avg * 1.1) return "bg-green-500"; 
    if (num < avg * 0.9) return "bg-red-500"; 
    return "bg-yellow-400"; 
  };

  const detectDistrict = async () => {
    if (!navigator.geolocation) {
      alert(showHindi ? "‡§Ü‡§™‡§ï‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ ‡§∏‡§ï‡§§‡§æ" : "Your browser doesn't support geolocation");
      return;
    }

    setLocationLoading(true);
    try {
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject);
      });

      const { latitude, longitude } = position.coords;
      
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`
      );
      const data = await response.json();
      
      const address = data.address;
      let detectedDistrict = address.city || address.town || address.district;
      
      detectedDistrict = detectedDistrict ? detectedDistrict.toUpperCase() : '';
      
      const matchingDistrict = districts.find(d => 
        d.includes(detectedDistrict) || detectedDistrict.includes(d)
      );

      if (matchingDistrict) {
        setSelectedDistrict(matchingDistrict);
      } else {
        alert(showHindi 
          ? "‡§Ü‡§™‡§ï‡§æ ‡§ú‡§ø‡§≤‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç‡•§" 
          : "Couldn't detect your district. Please select manually.");
      }
    } catch (error) {
      console.error("Error getting location:", error);
      alert(showHindi 
        ? "‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç‡•§" 
        : "Error detecting location. Please select manually.");
    }
    setLocationLoading(false);
  };

  return (
    <div className="p-6 font-sans bg-gray-50 min-h-screen">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold flex items-center gap-2 text-gray-800">
          <ClipboardList className="text-blue-600" />
          {showHindi ? "‡§Æ‡§®‡§∞‡•á‡§ó‡§æ ‡§°‡•á‡§ü‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°" : "MGNREGA Data Dashboard"}
        </h1>
        <button
          onClick={() => setShowHindi(!showHindi)}
          className="flex items-center gap-2 px-3 py-1 border rounded-md hover:bg-gray-100"
        >
          <Languages size={18} />
          {showHindi ? "English" : "‡§π‡§ø‡§Ç‡§¶‡•Ä"}
        </button>
      </div>

      <div className="flex flex-wrap gap-3 mb-6">
        <div className="flex gap-2">
          <select
            value={selectedDistrict}
            onChange={(e) => setSelectedDistrict(e.target.value)}
            className="border px-3 py-2 rounded-md"
          >
            <option value="">{showHindi ? "‡§ú‡§º‡§ø‡§≤‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç" : "Select District"}</option>
            {districts.map((d) => (
              <option key={d}>{d}</option>
            ))}
          </select>
          <button
            onClick={detectDistrict}
            disabled={locationLoading || districts.length === 0}
            className="border px-3 py-2 rounded-md hover:bg-gray-100 disabled:opacity-50"
            title={showHindi ? "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§è‡§Ç" : "Detect current location"}
          >
            {locationLoading ? "üìç..." : "üìç"}
          </button>
        </div>

        <select
          value={selectedYear}
          onChange={(e) => setSelectedYear(e.target.value)}
          className="border px-3 py-2 rounded-md"
        >
          <option value="">{showHindi ? "‡§µ‡§∞‡•ç‡§∑ ‡§ö‡•Å‡§®‡•á‡§Ç" : "Select Year"}</option>
          {years.map((y) => (
            <option key={y}>{y}</option>
          ))}
        </select>

        <button
          onClick={fetchData}
          className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
        >
          {showHindi ? "‡§¶‡•á‡§ñ‡•á‡§Ç" : "View"}
        </button>
      </div>

      <div className="flex items-center gap-4 mb-4 text-sm text-gray-700">
        <Info className="text-blue-600" size={18} />
        <div className="flex items-center gap-2">
          <span className="w-3 h-3 bg-green-500 rounded-full"></span>
          {showHindi ? "‡§î‡§∏‡§§ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞" : "Above Average"}
        </div>
        <div className="flex items-center gap-2">
          <span className="w-3 h-3 bg-yellow-400 rounded-full"></span>
          {showHindi ? "‡§î‡§∏‡§§ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§®" : "Average"}
        </div>
        <div className="flex items-center gap-2">
          <span className="w-3 h-3 bg-red-500 rounded-full"></span>
          {showHindi ? "‡§î‡§∏‡§§ ‡§∏‡•á ‡§ï‡§Æ" : "Below Average"}
        </div>
      </div>

      {loading && <p className="text-gray-600">{showHindi ? "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." : "Loading..."}</p>}

      {!loading && data.length > 0 && (
        <div className="overflow-x-auto bg-white rounded-lg shadow">
          <table className="min-w-full border-collapse text-sm text-left">
            <thead className="bg-blue-100 text-gray-700">
              <tr>
                <th className="p-3">{showHindi ? "‡§ú‡§º‡§ø‡§≤‡§æ" : "District"}</th>
                <th className="p-3">{showHindi ? "‡§µ‡§∞‡•ç‡§∑" : "Year"}</th>
                <th className="p-3">{showHindi ? "‡§Æ‡§π‡•Ä‡§®‡§æ" : "Month"}</th>
                {numericKeys.map((key) => (
                  <th key={key} className="p-3">
                    {showHindi ? hindiLabels[key] : key.replace(/_/g, " ")}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.map((d, i) => (
                <tr key={i} className="border-b hover:bg-gray-50 transition">
                  <td className="p-3">{d.district_name}</td>
                  <td className="p-3">{d.fin_year}</td>
                  <td className="p-3">{d.month}</td>
                  {numericKeys.map((key) => (
                    <td key={key} className="p-3">
                      {d[key] ?? "-"}{" "}
                      <span
                        className={`inline-block w-2 h-2 rounded-full ml-2 ${getDotColor(
                          key,
                          d[key]
                        )}`}
                      ></span>
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {!loading && data.length === 0 && (
        <p className="text-gray-600">{showHindi ? "‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§" : "No data found."}</p>
      )}
    </div>
  );
}